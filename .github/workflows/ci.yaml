---
name: ci
on:
  push:
    branches:
      - main
    tags:
      - v*
    paths-ignore:
      - '**.md'
  pull_request:
    paths-ignore:
      - '**.md'
jobs:
  yamllint:
    name: yamllint
    runs-on: ubuntu-latest
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
      - name: yaml-lint
        uses: ibiqlik/action-yamllint@v1
        with:
          config_file: .ci/yamllint.yml
          strict: true
  build:
    name: build
    runs-on: ubuntu-latest
    outputs:
      docker_tag: ${{ steps.docker_push.outputs.docker_tag }}
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - uses: actions/setup-go@v1
        with:
          go-version: 1.20.5
      - name: Set Swap Space
        uses: pierotofy/set-swap-space@v1.0
        with:
          swap-size-gb: 4
      - name: Memory usage
        run: free -m
      - name: List installed packages
        run: dpkg -la
      - name: Free Disk Space for Docker
        run: |
          df -h
          sudo apt-get remove aria2 azure-cli shellcheck rpm xorriso zsync \
               clang-12 lld-12 clang-format-12 \
               clang-13 lld-13 clang-format-13 \
               clang-14 lld-14 clang-format-14 \
               g++-9 g++-10 g++-12 g++-11 gfortran-9 gfortran-10 gfortran-11 google-chrome-stable \
               google-cloud-sdk \
               imagemagick \
               libmagickcore-dev libmagickwand-dev libmagic-dev ant ant-optional \
               mercurial apt-transport-https mono-complete mysql-client libmysqlclient-dev \
               mysql-server mssql-tools unixodbc-dev yarn libssl-dev \
               libfreetype6 libfreetype6-dev libfontconfig1 libfontconfig1-dev \
               php-common \
               php-pear \
               php8.1 \
               php8.1-amqp \
               php8.1-apcu \
               php8.1-bcmath \
               php8.1-bz2 \
               php8.1-cgi \
               php8.1-cli \
               php8.1-common \
               php8.1-curl \
               php8.1-dba \
               php8.1-dev \
               php8.1-enchant \
               php8.1-fpm \
               php8.1-gd \
               php8.1-gmp \
               php8.1-igbinary \
               php8.1-imagick \
               php8.1-imap \
               php8.1-interbase \
               php8.1-intl \
               php8.1-ldap \
               php8.1-mbstring \
               php8.1-memcache \
               php8.1-memcached \
               php8.1-mongodb \
               php8.1-msgpack \
               php8.1-mysql \
               php8.1-odbc \
               php8.1-opcache \
               php8.1-pcov \
               php8.1-pgsql \
               php8.1-phpdbg \
               php8.1-pspell \
               php8.1-readline \
               php8.1-redis \
               php8.1-snmp \
               php8.1-soap \
               php8.1-sqlite3 \
               php8.1-sybase \
               php8.1-tidy \
               php8.1-xdebug \
               php8.1-xml \
               php8.1-xsl \
               php8.1-yaml \
               php8.1-zip \
               php8.1-zmq \
               snmp pollinate libpq-dev powershell ruby-full nginx shim-signed \
               libnginx-mod-http-image-filter libmono-system-web4.0-cil monodoc-http \
               sphinxsearch subversion -yq --allow-remove-essential
          sudo apt-get autoremove -y
          sudo apt-get autoclean -y
          sudo rm -rf /usr/local/lib/android
          sudo apt clean
          docker rmi $(docker image ls -aq)
          df -h
      - name: Docker Build
        run: |
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
          docker buildx create --use --bootstrap
          echo "docker buildx inspect --bootstrap"
          docker buildx inspect --bootstrap
          echo "docker buildx build --platform linux/amd64,linux/arm64 ."
          docker buildx build --platform linux/amd64,linux/arm64 .
          VPP_VERSION=$(docker run $(docker build -q . --target version))
          echo "VPP_VERSION=${VPP_VERSION}" >> $GITHUB_ENV
          TAG=v${VPP_VERSION/\~/-}
          echo "TAG=${TAG}" >> $GITHUB_ENV
          docker buildx build --platform linux/amd64,linux/arm64 -t ghcr.io/${{github.repository}}/vpp:${TAG} . --target vpp
          docker buildx build --platform linux/amd64,linux/arm64 -t ghcr.io/${{github.repository}}/vpp-dbg:${TAG} . --target vpp-dbg
      - name: Generate files
        run: go generate ./...
      - name: Check for changes in generated code
        run: |
          git diff -- binapi || (echo "Rerun go generate ./... locally and resubmit" && exit -1)
      - name: Go Build
        run: go build ./...
      - name: Login to GitHub Container Registry
        id: docker_login
        if: ${{ github.event_name == 'push' }}
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Docker Push
        id: docker_push
        if: steps.docker_login.outcome == 'success'
        run: |
          docker push ghcr.io/${{github.repository}}/vpp:${TAG}
          docker push ghcr.io/${{github.repository}}/vpp-dbg:${TAG}
          echo docker_tag=${TAG} >> $GITHUB_OUTPUT
  update_dependent_repositories:
    name: update_dependent_repositories
    needs: build
    if: ${{ github.event_name == 'push' }}
    uses: networkservicemesh/govpp/.github/workflows/update-dependent-repositories.yaml@main
    with:
      docker_tag: ${{ needs.build.outputs.docker_tag }}
    secrets:
      token: ${{ secrets.NSM_BOT_GITHUB_TOKEN }}
